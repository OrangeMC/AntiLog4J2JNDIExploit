package moe.orangemc.shiina_xi_yu.antilog4jjndiexploit;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import com.google.common.collect.Sets;
import org.bukkit.plugin.java.JavaPlugin;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.util.HashSet;

import static moe.orangemc.shiina_xi_yu.antilog4jjndiexploit.StringChecker.replace0;

public class SpigotPlayerClientPacketHandle
{
    public static void initialize(JavaPlugin plugin)
    {
        ProtocolManager manager = ProtocolLibrary.getProtocolManager();
        HashSet<PacketType> packetTypes = Sets.newHashSet(PacketType.Handshake.Client.getInstance().values());
        packetTypes.addAll(PacketType.Play.Client.getInstance().values());
        packetTypes.addAll(PacketType.Login.Client.getInstance().values());
        manager.addPacketListener(new PacketAdapter(PacketAdapter.params()
                .plugin(plugin)
                .clientSide()
                .listenerPriority(ListenerPriority.LOWEST)
                .types(packetTypes))
        {

            private MethodHandle isRecord()
            {
                MethodHandles.Lookup lookup = MethodHandles.lookup();
                try
                {
                    return lookup.findVirtual(Class.class, "isRecord", MethodType.methodType(boolean.class));
                }
                catch (Throwable ignore)
                {
                    return MethodHandles.dropArguments(MethodHandles.constant(boolean.class, false), 0, Class.class);
                }
            }

            final MethodHandle isRecord = isRecord();

            @Override
            public void onPacketReceiving(PacketEvent event)
            {
                try
                {
                    if ((boolean) isRecord.invokeExact(event.getPacket().getHandle().getClass())) return;

                    StructureModifier<String> strings = event.getPacket().getStrings();
                    for (int i = 0; i < strings.size(); i++) strings.modify(i, v -> replace0(v, event.getPlayer()));
                    StructureModifier<String[]> stringArrays = event.getPacket().getStringArrays();
                    for (int i = 0; i < stringArrays.size(); i++)
                    {
                        stringArrays.modify(i, v ->
                        {
                            for (int z = 0; z < v.length; z++)
                            {
                                v[z] = replace0(v[z], event.getPlayer());
                            }
                            return v;
                        });
                    }
                }
                catch (Throwable e)
                {
                    throw new RuntimeException(e);
                }
            }
        });
    }
}
