package moe.orangemc.shiina_xi_yu.antilog4jjndiexploit;

import org.apache.logging.log4j.core.net.JndiManager;
import org.bukkit.Bukkit;

import javax.naming.*;
import java.lang.reflect.Field;
import java.util.Hashtable;
import java.util.concurrent.atomic.AtomicLong;

public class JndiContextPatcher
{
    public static void initialize(Field field) throws IllegalAccessException, AlreadyFixedException {
        field.setAccessible(true);
        try {
            JndiManager.getDefaultManager();
        } catch (IllegalStateException e) {
            throw new AlreadyFixedException(e);
        }
        field.set(JndiManager.getDefaultManager(), new Context()
        {
            private final AtomicLong lastBroadcastTime = new AtomicLong();

            @Override
            public Object lookup(Name name)
            {
                return null;
            }

            @Override
            public Object lookup(String name)
            {
                do
                {
                    long now = System.currentTimeMillis();
                    long crt = lastBroadcastTime.get();
                    if (now - crt < 100) return null;
                    if (!lastBroadcastTime.compareAndSet(crt, now)) continue;
                    if (Config.msg_broadcast_system != null) {
                        Bukkit.broadcastMessage(Config.msg_broadcast_system);
                    }
                    return null;
                } while (true);
            }

            @Override
            public void bind(Name name, Object obj)
            {

            }

            @Override
            public void bind(String name, Object obj)
            {

            }

            @Override
            public void rebind(Name name, Object obj)
            {

            }

            @Override
            public void rebind(String name, Object obj)
            {

            }

            @Override
            public void unbind(Name name)
            {

            }

            @Override
            public void unbind(String name)
            {

            }

            @Override
            public void rename(Name oldName, Name newName)
            {

            }

            @Override
            public void rename(String oldName, String newName)
            {

            }

            @Override
            public NamingEnumeration<NameClassPair> list(Name name)
            {
                return null;
            }

            @Override
            public NamingEnumeration<NameClassPair> list(String name)
            {
                return null;
            }

            @Override
            public NamingEnumeration<Binding> listBindings(Name name)
            {
                return null;
            }

            @Override
            public NamingEnumeration<Binding> listBindings(String name)
            {
                return null;
            }

            @Override
            public void destroySubcontext(Name name)
            {

            }

            @Override
            public void destroySubcontext(String name)
            {

            }

            @Override
            public Context createSubcontext(Name name)
            {
                return null;
            }

            @Override
            public Context createSubcontext(String name)
            {
                return null;
            }

            @Override
            public Object lookupLink(Name name)
            {
                return null;
            }

            @Override
            public Object lookupLink(String name)
            {
                return null;
            }

            @Override
            public NameParser getNameParser(Name name)
            {
                return null;
            }

            @Override
            public NameParser getNameParser(String name)
            {
                return null;
            }

            @Override
            public Name composeName(Name name, Name prefix)
            {
                return null;
            }

            @Override
            public String composeName(String name, String prefix)
            {
                return null;
            }

            @Override
            public Object addToEnvironment(String propName, Object propVal)
            {
                return null;
            }

            @Override
            public Object removeFromEnvironment(String propName)
            {
                return null;
            }

            @Override
            public Hashtable<?, ?> getEnvironment()
            {
                return null;
            }

            @Override
            public void close()
            {

            }

            @Override
            public String getNameInNamespace()
            {
                return null;
            }
        });
    }
}
