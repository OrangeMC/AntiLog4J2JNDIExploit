package moe.orangemc.shiina_xi_yu.antilog4jjndiexploit;

import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.plugin.PluginManager;
import net.md_5.bungee.config.Configuration;
import net.md_5.bungee.config.YamlConfiguration;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.logging.Level;

public class BungeeMain extends Plugin
{
    @Override
    public void onEnable()
    {
        try
        {
            onEnable0();
        }
        catch (Throwable e)
        {
            getLogger().log(Level.SEVERE,
                    "Here is some error when loading this plugin. For your security, closing server forced.",
                    e);
            getProxy().stop();
        }
    }

    public void onEnable0() throws IOException
    {
        StringChecker.PLATFORM = new StringChecker.PlatformPlayerHelper()
        {
            @Override
            public void sendToPlayer(Object player, String msg)
            {
                ((ProxiedPlayer) player).sendMessage(new TextComponent(msg));
            }

            @Override
            public String getName(Object player)
            {
                return ((ProxiedPlayer) player).getName();
            }

            @Override
            public void broadcast(String msg)
            {
                getProxy().broadcast(new TextComponent(msg));
            }
        };
        reloadConfig();
        PluginManager pluginManager = getProxy().getPluginManager();
        pluginManager.registerListener(this, new BungeePlayerClientPacketHandle());
    }

    private void reloadConfig() throws IOException
    {
        if (!getDataFolder().exists()) //noinspection ResultOfMethodCallIgnored
            getDataFolder().mkdir();
        File file = new File(getDataFolder(), "config.yml");

        if (!file.exists()) {
            try (InputStream in = getResourceAsStream("config.yml")) {
                Files.copy(in, file.toPath());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        Configuration configuration = YamlConfiguration.getProvider(YamlConfiguration.class).load(new File(getDataFolder(), "config.yml"));
        Config.msg_broadcast_player_packet = configuration.getString("message.broadcast.player-packet", null);
        Config.sendBackIfExploit = configuration.getBoolean("repeat-back-to-exploiter", true);
    }
}